<?php
/**
 * Created by PhpStorm.
 * Date: 19-1-30
 * Time: 下午2:43
 */

namespace App\Utils\ServiceConfiguration\Libvirt;


class LibvirtdConfiguration
{
    const FORCE_CONTENT = <<<EOF
unix_sock_group = "libvirt"
unix_sock_ro_perms = "0770"
unix_sock_rw_perms = "0770"
unix_sock_admin_perms = "0700"
unix_sock_dir = "/var/run/libvirt"

auth_unix_ro = "none"
auth_unix_rw = "none"
auth_tcp = "sasl"
auth_tls = "none"

# DON'T SET "tls_no_verify_certificate" TO 1 UNLESS YOU SURE WHAT ARE YOU DOING
tls_no_verify_certificate = 0

EOF;

    private $settings = [];

    private $allowedDNList = [];

    public $additionalContent = "";

    /**
     * Listen tls toggle
     * @param boolean $enable
     * @return self
     */
    public function setListenTLS($enable)
    {
        return $this->set("listen_tls", intval(boolval($enable)));
    }

    /**
     * Listen tcp toggle
     * @param boolean $enable
     * @return self
     */
    public function setListenTCP($enable)
    {
        return $this->set("listen_tcp", intval(boolval($enable)));
    }

    public function setTLSPort($tlsPort)
    {
        return $this->set("tls_port", (string) $tlsPort);
    }

    public function setTCPPort($tcpPort)
    {
        return $this->set("tcp_port", (string) $tcpPort);
    }

    public function setListenAddress($listenAddress)
    {
        return $this->set("listen_addr", $listenAddress);
    }

    public function setServerKeyFilePath($serverKeyFilePath)
    {
        return $this->set("key_file", $serverKeyFilePath);
    }

    public function setServerCertificateFilePath($serverCertificateFilePath)
    {
        return $this->set("cert_file", $serverCertificateFilePath);
    }

    public function setCACertificateFilePath($CACertificateFilePath)
    {
        return $this->set("ca_file", $CACertificateFilePath);
    }

    public function setCRLFilePath($CRLFilePath)
    {
        return $this->set("crl_file", $CRLFilePath);
    }

    public function setLogLevel($logLevel)
    {
        return $this->set("log_level", intval($logLevel));
    }

    public function setLogOutputs($logOutputs)
    {
        return $this->set("log_outputs", $logOutputs);
    }

    public function addAllowedDN($dn)
    {
        $this->allowedDNList[] = $dn;
    }

    public function setAdditionalContent($additionalContent)
    {
        $this->additionalContent = $additionalContent;
        return $this;
    }

    public function make()
    {
        // Set configuration header
        $configuration = "# Auto generated by CCMS-SLAVE at ";
        $configuration .= date("Y-m-d H:i:s");
        $configuration .= PHP_EOL . "# Don't edit this file manually" . PHP_EOL;
        $configuration .= self::FORCE_CONTENT;

        // Combine settings
        foreach ($this->settings as $name => $value) {
            $configuration .= $name;
            $configuration .= " = ";
            if (is_integer($value))
                $configuration .= $value;
            else
                $configuration .= '"'. $value .'"'; // String need double quotation
            $configuration .= PHP_EOL;
        }

        $configuration .= "tls_allowed_dn_list = [" . PHP_EOL;
        foreach ($this->allowedDNList as $allowedDN)
        {
            $configuration .= "\"$allowedDN\"," . PHP_EOL;
        }
        $configuration .= "]" . PHP_EOL;

        # Append additional content
        $configuration .= "# Additional configuration content" . PHP_EOL;
        $configuration .= $this->additionalContent;

        return $configuration;
    }

    public function makeThenWrite()
    {
        file_put_contents(Constants::CONFIGURATION_FILE_PATH, $this->make());
    }

    public function set($name, $value)
    {
        if (is_null($value))
            unset($this->settings[$name]);
        else
            $this->settings[$name] = $value;
        return $this;
    }

    public function __get($name)
    {
        return $this->settings[$name];
    }

    public function __set($name, $value)
    {
        $this->set($name, $value);
    }
}